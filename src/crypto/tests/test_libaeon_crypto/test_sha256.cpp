// Distributed under the BSD 2-Clause License - Copyright 2012-2020 Robin Degen

#include <aeon/crypto/sha256.h>
#include <gtest/gtest.h>

using namespace aeon;

TEST(test_sha256, test_sha256_empty_hash)
{
    crypto::sha256 sha;
    const auto f = sha.finalize();

    const std::array<std::uint8_t, 32> expected = {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
                                                   0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
                                                   0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

    EXPECT_EQ(f, expected);
}

TEST(test_sha256, test_sha256_simple_hash)
{
    crypto::sha256 sha;
    sha.write("testing");
    const auto f = sha.finalize();

    const std::array<std::uint8_t, 32> expected = {0xcf, 0x80, 0xcd, 0x8a, 0xed, 0x48, 0x2d, 0x5d, 0x15, 0x27, 0xd7,
                                                   0xdc, 0x72, 0xfc, 0xef, 0xf8, 0x4e, 0x63, 0x26, 0x59, 0x28, 0x48,
                                                   0x44, 0x7d, 0x2d, 0xc0, 0xb0, 0xe8, 0x7d, 0xfc, 0x9a, 0x90};

    EXPECT_EQ(f, expected);
}

TEST(test_sha256, test_sha256_parts)
{
    crypto::sha256 sha;
    sha.write("test");
    sha.write("ing");
    const auto f = sha.finalize();

    const std::array<std::uint8_t, 32> expected = {0xcf, 0x80, 0xcd, 0x8a, 0xed, 0x48, 0x2d, 0x5d, 0x15, 0x27, 0xd7,
                                                   0xdc, 0x72, 0xfc, 0xef, 0xf8, 0x4e, 0x63, 0x26, 0x59, 0x28, 0x48,
                                                   0x44, 0x7d, 0x2d, 0xc0, 0xb0, 0xe8, 0x7d, 0xfc, 0x9a, 0x90};

    EXPECT_EQ(f, expected);
}

TEST(test_sha256, test_sha256_longer_string)
{
    crypto::sha256 sha;
    sha.write("We are the Borg. Existence, as you know it, is over. We will add your biological and technological "
              "distinctiveness to our own. Resistance is futile.");
    const auto f = sha.finalize();

    const std::array<std::uint8_t, 32> expected = {0xd0, 0x55, 0x87, 0x33, 0xd5, 0x7d, 0x8b, 0xf4, 0x22, 0xeb, 0x25,
                                                   0x20, 0xed, 0x93, 0x63, 0x0f, 0x40, 0xba, 0x51, 0x99, 0x34, 0x68,
                                                   0xe0, 0xb2, 0x54, 0x35, 0x98, 0xef, 0xd3, 0x11, 0x68, 0x0a};

    EXPECT_EQ(f, expected);
}
